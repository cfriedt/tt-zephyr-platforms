name: Metal ðŸ¤˜

# Run long tests once nightly, at 00:00
on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  build-fw-artifact:
    uses: ./.github/workflows/build-fw.yml
    secrets:
      SIGNATURE_KEY: ${{ secrets.SIGNATURE_KEY }}

  gen-config:
    runs-on: ubuntu-24.04
    outputs:
      matrix-config: ${{ steps.gen-config.outputs.matrix-config }}
    steps:
      - uses: actions/checkout@v4
      - id: gen-config
        shell: bash
        run: |
          # Output the entire compact JSON matrix config on one line
          MATRIX_CONFIG="$(jq -c "." .github/ci_boards.json)"
          echo "matrix-config=$MATRIX_CONFIG" | tee -a $GITHUB_OUTPUT

  metal-test:
    needs: [build-fw-artifact, gen-config]
    strategy:
      fail-fast: false
      matrix:
        config: ${{ fromJson(needs.gen-config.outputs.matrix-config) }}
    runs-on: ${{ matrix.config.runs-on }}
    container:
      image: ${{ matrix.config.metal-image }}
      volumes:
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /dev/hugepages:/dev/hugepages
      options: '--device /dev/tenstorrent --device /dev/bus/usb --privileged'
    env:
      ARCH_NAME: blackhole
      HOME: /home/user/tt-metal
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.HOME }}
    steps:
      - id: mkdir-home-user-tt-metal
        run: |
          mkdir -p $HOME
      - name: Download the latest firmware bundle
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-fw-artifact.outputs.combined-fwbundle-artifact }}
          path: ${{ env.HOME }}
      - name: Run the rescan-pcie.sh script
        run: |
          curl -o /tmp/rescan-pcie.sh https://raw.githubusercontent.com/tenstorrent/tt-zephyr-platforms/${{ github.sha }}/scripts/rescan-pcie.sh
          source /tmp/rescan-pcie.sh
      - name: Flash the firmware
        run: |
          mkdir -p $HOME/.cargo $HOME/.cache
          python -m venv .env
          source .env/bin/activate
          pip install git+https://github.com/tenstorrent/tt-flash.git@v3.4.2
          tt-flash --fw-tar $HOME/fw_pack-*.fwbundle --force
      - name: Run Container Test
        run: |
          sh -c "dockerfile/upstream_test_images/run_upstream_tests_vanilla.sh blackhole_no_models"
      - name: cleanup
        if: ${{ always() }}
        run: |
          # Clean out metal
          rm -f $HOME/fw_pack-*.fwbundle
